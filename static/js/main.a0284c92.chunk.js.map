{"version":3,"sources":["utils/api.js","components/DirectoryHead.js","components/DirectoryDetails.js","components/Footer.js","components/Navbar.js","components/DirectoryTable.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","DirectoryHead","props","scope","href","className","onClick","sortFirst","sortLast","DirectoryDetails","results","map","result","src","picture","medium","alt","name","first","last","login","username","email","phone","location","city","Footer","id","Navbar","DirectoryTable","state","search","currentPage","filtered","showEmployees","API","then","res","setState","data","catch","err","console","log","handlePageChange","page","handleInputChange","event","target","value","ignoreSubmit","preventDefault","firstName","sort","a","b","nameA","toUpperCase","nameB","comparison","lastName","this","Component","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a0284c92.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Gets all Employee information from database.\n// will call function later to retrieve data into table.\n\nexport default {\n  getEmployees: () => {\n    return axios.get(\"https://randomuser.me/api/?results=10&nat=us\");\n  },\n};\n","import React from \"react\";\n\n\n\nconst DirectoryHead = (props) => {\n  return (\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">\n          <a\n            href=\"#name\"\n            className=\"btn btn-link\"\n            onClick={() => props.sortFirst()}\n          >\n            First\n          </a>\n        </th>\n        <th scope=\"col\">\n          <a\n            href=\"#name\"\n            className=\"btn btn-link\"\n            onClick={() => props.sortLast()}\n          >\n            Last\n          </a>\n        </th>\n        <th scope=\"col\">Username</th>\n        <th scope=\"col\">Email</th>\n        <th scope=\"col\">Phone</th>\n        <th scope=\"col\">City</th>\n      </tr>\n    </thead>\n  );\n};\n\nexport default DirectoryHead;\n","import React from \"react\";\n\n// this should create a row in the table for each individual employee.\n// each row will contain an image, first, last, email, phone.\n// will replicate for each returned employee from the data base.\n\nfunction DirectoryDetails(props) {\n  return (\n    <tbody className=\"tablebody\">\n      {props.results.map((result) => {\n        return (\n          <tr>\n            <td>\n              <img src={result.picture.medium} alt={result.name}></img>\n            </td>\n            <td>{result.name.first}</td>\n            <td>{result.name.last}</td>\n            <td>{result.login.username}</td>\n            <td>{result.email}</td>\n            <td>{result.phone}</td>\n            <td>{result.location.city}</td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n}\n\nexport default DirectoryDetails;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer\n      id=\"sticky-footer\"\n      className=\"py-4 bg-dark d-flex justify-content-center text-white-50\"\n    >\n      <h5>William Trout</h5>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar() {\n  return (\n    <header>\n      <nav className=\"navbar navbar-expand-lg bg-dark d-flex justify-content-center text-white-50\">\n        <h1>Employee Directory</h1>\n      </nav>\n      <hr className=\"new5\"></hr>\n    </header>\n  );\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport API from \"../utils/api\";\nimport Directoryhead from \"./DirectoryHead\";\nimport Directorydetails from \"./DirectoryDetails\";\nimport Footer from \"./Footer\";\nimport Navbar from \"./Navbar\";\nimport \"./style.css\";\n\nclass DirectoryTable extends Component {\n  state = {\n    result: [],\n    search: \"\",\n    currentPage: \"\",\n    filtered: [],\n  };\n  componentDidMount() {\n    this.showEmployees();\n  }\n  // api call to get info from database\n  showEmployees = () => {\n    API.getEmployees()\n      .then((res) => {\n        this.setState({ result: res.data.results });\n      })\n      .catch((err) => console.log(err));\n    console.log(this.state.results);\n  };\n\n  // set state\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  };\n\n  // Inputs are event driven, get the value of a name to be filtered\n  handleInputChange = (event) => {\n    this.handlePageChange(event.target.value);\n  };\n\n  // Prevent search from refreshing\n  ignoreSubmit = (event) => {\n    event.preventDefault();\n    return;\n  };\n\n  // functions to handle sort criteria\n\n  // sort by first.\n  sortFirst = () => {\n    let firstName = this.state.result.sort(compare);\n\n    function compare(a, b) {\n      const nameA = a.name.first.toUpperCase();\n      const nameB = b.name.first.toUpperCase();\n      let comparison = 0;\n      if (nameA > nameB) {\n        comparison = 1;\n      } else if (nameA < nameB) {\n        comparison = -1;\n      }\n      return comparison;\n    }\n    this.setState({\n      result: firstName,\n    });\n  };\n\n  // sort by last\n  sortLast = () => {\n    let lastName = this.state.result.sort(compare);\n\n    function compare(a, b) {\n      const nameA = a.name.last.toUpperCase();\n      const nameB = b.name.last.toUpperCase();\n      let comparison = 0;\n      if (nameA > nameB) {\n        comparison = 1;\n      } else if (nameA < nameB) {\n        comparison = -1;\n      }\n      return comparison;\n    }\n    this.setState({\n      result: lastName,\n    });\n  };\n\n  // function to render table card\n\n  render() {\n    return (\n      <div className=\"body\">\n        <Navbar />\n        <div className=\"container\">\n          <div className=\"jumbotron\">\n            <div className=\"table\">\n              <Directoryhead\n                sortFirst={this.sortFirst}\n                sortLast={this.sortLast}\n              />\n              <Directorydetails results={this.state.result} />\n            </div>\n          </div>\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DirectoryTable;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport DirectoryTable from \"./components/DirectoryTable\";\n\n// import Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={DirectoryTable} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}